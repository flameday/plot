//------------------------------------------------------------------------
// 简称:WaveMachine
// 名称:计算机数浪
// 类别: 交易指令
// 类型: 用户应用
//------------------------------------------------------------------------
Params         
        //参数定义
		Numeric TimeFrame(240);                // 目标时间周期参数，参数说明参见MtBar
        Numeric BarsBack(1);                 // 目标时间周期BAR偏移参数，说明见MtBar函数
        Numeric FastLength(12);
        Numeric SlowLength(26);
        Numeric MACDLength(9);
    	Numeric Lots(1);
		
GlobalVars
Vars
		Integer minCount(0);
		Integer maxCount(0);
		NumericSeries avg10;
		NumericSeries lowArr;
		NumericSeries highArr;
		NumericSeries macd240Arr;
		Integer offset;
		Integer i;
		
		Integer lastMin(-1);
		Integer lastMax(-1);
		Integer oldMin;
		Integer oldMax;
		Integer index0;
		Integer index1;
		Integer x1;
		Integer x2;
		Numeric y1;
		Numeric y2;
		Numeric yMax;
		Numeric yMin;
		
		Integer highCntFromLastMin(0);
		Integer lowCntFromLastMin(0);
		
		Integer highCntFromLastMax(0);
		Integer lowCntFromLastMax(0);
		Numeric tmp;
		
		//macd240
		NumericSeries MACDValue;
        NumericSeries AvgMACD;
        NumericSeries MACDDiff;
        Numeric ooMACDValue;
        Numeric ooAvgMACD;
        Numeric PreBar;
				
Begin
		PreBar = MtMACD(TimeFrame,BarsBack,FastLength,SlowLength,MACDLength,ooMACDValue,ooAvgMACD);
        MACDVAlue = ooMACDValue;
        AvgMACD = ooAvgMACD;
        MACDDiff = MACDValue - AvgMACD;
		
		//commentary("start="+text(currenttime));
		avg10  = AverageFC(Close, 10);
		lowArr = AverageFC(Low, 1);
		highArr= AverageFC(High, 1);
		if (CurrentBar == 0) {
			SetGlobalVar(0, -1);
			SetGlobalVar(1, -1);
			
			SetGlobalVar(49, -1);
			SetGlobalVar(39, -1);
		}
		lastMin = GetGlobalVar(0);
		lastMax = GetGlobalVar(1);
		oldMin = lastMin;
		oldMax = lastMax;
		
		index0 = GetGlobalVar(49);//表示待写入值
		index1 = GetGlobalVar(39);//表示待写入值
		
		//设置第一个Dot
		if (lastMax == -1) {
			maxCount = 0;
			for i=0 to CurrentBar {
				if (lowArr[i] > avg10[i]){
					maxCount += 1;
				}
				//绘制
				if (maxCount >= 3 && lastMax == -1) {
					lastMax = i;
					SetGlobalVar(1, i);
					break;
				}
			}
		}
		//设置第一个Dot
		if (lastMin == -1) {
			minCount = 0;
			for i=0 to CurrentBar {
				if (highArr[i] < avg10[i]) {
					minCount += 1;
				}
				//绘制
				if (minCount >= 3 && lastMin == -1) {
					lastMin = i;
					SetGlobalVar(0, i);
					break;
				}
			}
		}
		if (lastMax == -1 && lastMin == -1) {
			//
		} else {
			if (lastMax == -1) {
				lastMax = 0;
			}
			if (lastMin == -1) {
				lastMin = 0;
			}
			for offset = 0 to CurrentBar - lastMax {
				if (lowArr[offset] > avg10[offset]){
					highCntFromLastMax += 1;
				} 
				if (highArr[offset] < avg10[offset]) {
					lowCntFromLastMax += 1;
				}
			}
			for offset = 0 to CurrentBar - lastMin{
				if (lowArr[offset] > avg10[offset]){
					highCntFromLastMin += 1;
				}
				if (highArr[offset] < avg10[offset]) {
					lowCntFromLastMin += 1;
				}
			}
			//判断1
			if (lastMin < lastMax) {
				if (highCntFromLastMin >= 3) {
					//高度比较
					if (highArr[CurrentBar - lastMax] > highArr[0]){
						//keep old
					} else{
						//更高
						lastMax = CurrentBar;
						SetGlobalVar(1, CurrentBar);
					}
				}
				if (lowCntFromLastMax >= 3) {
					//保存上一个lastMin
					index0 = (index0 +1)%9;
					SetGlobalVar(40 + index0, lastMin);
					SetGlobalVar(49, index0);
					
					lastMin = CurrentBar;
					SetGlobalVar(0, CurrentBar);
				}
			} else if(lastMin > lastMax) {
				if (lowCntFromLastMax >= 3) {
					//高度比较
					if (lowArr[CurrentBar - lastMin] < lowArr[0]) {
						//keep
					} else {
						//更低
						lastMin = CurrentBar;
						SetGlobalVar(0, CurrentBar);
					}
				}
				if (highCntFromLastMin >= 3) {
					index1 = (index1 +1)%9;
					SetGlobalVar(30+index1, lastMax);
					SetGlobalVar(39, index1);
					//保存上一个lastMax
					lastMax = CurrentBar;
					SetGlobalVar(1, CurrentBar);
				}
			}
		}
		//Plotnumeric("lowArr[CurrentBar-lastMin]",lowArr[CurrentBar - lastMin]);
		//Plotnumeric("lowArr[CurrentBar]",lowArr[0]);
		//Plotnumeric("avg10[CurrentBar]",avg10[0]);
		
		// 打印记录的索引值
		//Plotnumeric("oldMax",oldMax);
		//Plotnumeric("oldMin",oldMin);
		//SetGlobalLoop0(CurrentBar);
		//PlotNumeric("oldMin", tmp);
		
		if (oldMin > oldMax &&lastMax > oldMax) {
			PartLine("minMax2", CurrentBar-oldMax, highArr[CurrentBar-oldMax], CurrentBar-oldMin, lowArr[CurrentBar-oldMin]);
		}
		if (oldMax >oldMin && lastmin > oldMin){
			PartLine("minMax2", CurrentBar-oldMin, lowArr[CurrentBar-oldMin], CurrentBar-oldMax, highArr[CurrentBar-oldMax]);
		}
		
		//打印 Bar 的 index	
		Plotnumeric("CurrentBar",CurrentBar);
		
		//Plotnumeric("highCntFromLastMax",highCntFromLastMax);
		//Plotnumeric("lowCntFromLastMax",lowCntFromLastMax);
		//Plotnumeric("highCntFromLastMin",highCntFromLastMin);
		//Plotnumeric("lowCntFromLastMin",lowCntFromLastMin);
		
		// 最后一个高点、最后一个低点会被丢掉
		//commentary("end="+text(currenttime));
		//commentary("currentbar="+text(currentbar));
		for i = 0 to 9 {
			tmp = GetGlobalVar(40 + i);
			//commentary("tmp="+text((i+1)*100000 +tmp));
			tmp = GetGlobalVar(30 + i);
			//commentary("tmp="+text((i+1)*100000 +tmp));
		}
		// 绘制最近的通道线
		index0 = GetGlobalVar(49);
		index1 = GetGlobalVar(39);
		oldMin = GetGlobalVar(40+index0);
		oldMax = GetGlobalVar(30+index1);
		lastMin = GetGlobalVar(0);
		lastMax = GetGlobalVar(1);
		//commentary("oldMin"+text(oldMin));
		//commentary("oldMax"+text(oldMax));
		//commentary("lastMin"+text(lastMin));
		//commentary("lastMax"+text(lastMax));
		
		// y = y1 +[(y2-y1)/(x2-x1)]*(x-x1)
		y1 = lowArr[CurrentBar-oldMin];
		y2 = lowArr[CurrentBar-lastMin];
		x1 = oldMin;
		x2 = lastMin;
		
		yMin = y1 + (CurrentBar - x1)*(y2-y1)/(x2-x1);
		
		y1 = lowArr[CurrentBar-oldMax];
		y2 = lowArr[CurrentBar-lastMax];
		x1 = oldMax;
		x2 = lastMax;
		yMax = y1 + (CurrentBar - x1)*(y2-y1)/(x2-x1);
		
		
		//if (BarStatus == 2) {
		if (CurrentBar == 4800) {
			//PartLine("TrendMin", CurrentBar-oldMin, lowArr[CurrentBar-oldMin], CurrentBar-lastMin, lowArr[CurrentBar-lastMin]);
			PartLine("TrendMin", CurrentBar-oldMin, lowArr[CurrentBar-oldMin], 0, yMin);
			//PartLine("TrendMax", CurrentBar-oldMax, highArr[CurrentBar-oldMax], CurrentBar-lastMax, highArr[CurrentBar-lastMax]);
			PartLine("TrendMax", CurrentBar-oldMax, highArr[CurrentBar-oldMax],0, yMax);
			
			// 往前回溯，找到金叉位置
			tmp = MACDDiff;
			for i=1 to 300 {
				if (MACDDiff[i]*tmp <= 0) {
					//if ((MACDValue[CurrentBar-i+1] >= AvgMACD[CurrentBar-i+1]) &&
					//(MACDValue[CurrentBar-i-1] <= AvgMACD[CurrentBar-i-1])) {
						//Commentary("MACDValue[CurrentBar-i-1]"+Text(MACDValue[CurrentBar-i-1]));
						//Commentary("AvgMACD[CurrentBar-i-1]"+Text(AvgMACD[CurrentBar-i-1]));
						//Commentary("MACDValue[CurrentBar-i+1]"+Text(MACDValue[CurrentBar-i+1]));
						//Commentary("AvgMACD[CurrentBar-i+1]"+Text(AvgMACD[CurrentBar-i+1]));
						
						Commentary("i"+Text(i));
						Commentary("MACDDiff[i]"+Text(MACDDiff[i]));
						//PlotNumeric("cross", i);
					break;
				}
			}
			// 从金叉位置，拟合曲线。然后往两侧平移
			
		}
		
		
		
End
